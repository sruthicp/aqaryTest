// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, phone_number
) VALUES (
$1, $2
) RETURNING id
`

type CreateUserParams struct {
	Column1 sql.NullString
	Column2 sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Column1, arg.Column2)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const generateOTP = `-- name: GenerateOTP :exec
UPDATE users 
SET otp = $1, otp_expiration_time = $2 
WHERE phone_number = $3
`

type GenerateOTPParams struct {
	Column1 sql.NullString
	Column2 sql.NullTime
	Column3 sql.NullString
}

func (q *Queries) GenerateOTP(ctx context.Context, arg GenerateOTPParams) error {
	_, err := q.db.Exec(ctx, generateOTP, arg.Column1, arg.Column2, arg.Column3)
	return err
}

const phoneNumberExists = `-- name: PhoneNumberExists :one
SELECT EXISTS (
    SELECT 1 FROM users WHERE phone_number = $1
)
`

func (q *Queries) PhoneNumberExists(ctx context.Context, dollar_1 sql.NullString) (bool, error) {
	row := q.db.QueryRow(ctx, phoneNumberExists, dollar_1)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const verifyOTP = `-- name: VerifyOTP :one
SELECT otp, otp_expiration_time 
FROM users 
WHERE phone_number = $1
`

type VerifyOTPRow struct {
	Otp               sql.NullString
	OtpExpirationTime sql.NullTime
}

func (q *Queries) VerifyOTP(ctx context.Context, dollar_1 sql.NullString) (VerifyOTPRow, error) {
	row := q.db.QueryRow(ctx, verifyOTP, dollar_1)
	var i VerifyOTPRow
	err := row.Scan(&i.Otp, &i.OtpExpirationTime)
	return i, err
}
